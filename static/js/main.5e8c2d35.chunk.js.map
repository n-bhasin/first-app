{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","this","props","totalCounter","Component","Counter","getBadgeClass","format","type","onClick","handleIncrement","counters","onDelete","id","classes","value","count","Counters","onReset","map","key","onIncrement","App","state","handleReset","c","setState","counter","index","indexOf","handleDelete","counterID","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAiCeA,E,iLAbX,OACE,yBAAKC,UAAU,8BACb,0BAAMA,UAAU,wBAAhB,SACS,IACP,0BAAMA,UAAU,oCACbC,KAAKC,MAAMC,oB,GAPHC,aCyENC,E,iLAlDH,IAAD,OAIP,OACE,6BAEE,0BAAML,UAAWC,KAAKK,iBAAkBL,KAAKM,UAK7C,4BACEC,KAAK,SACLC,QAAS,kBAAM,EAAKP,MAAMQ,gBAAgB,EAAKR,MAAMS,WACrDX,UAAU,4BAHZ,aAQA,4BACEQ,KAAK,SACLC,QAAS,kBAAM,EAAKP,MAAMU,SAAS,EAAKV,MAAMS,SAASE,KACvDb,UAAU,6BAHZ,a,sCAgBJ,IAAIc,EAAU,mBAGd,OADAA,GAAyC,IAA9Bb,KAAKC,MAAMS,SAASI,MAAc,UAAY,Y,+BAKlD,IAEQC,EAAUf,KAAKC,MAAMS,SAA5BI,MACR,OAAiB,IAAVC,EAAc,OAASA,M,GArFZZ,aCyBPa,E,iLAvBH,IAAD,OACP,OACE,6BACE,4BACER,QAASR,KAAKC,MAAMgB,QACpBlB,UAAU,6BACVQ,KAAK,UAHP,SAOCP,KAAKC,MAAMS,SAASQ,KAAI,SAAAR,GAAQ,OAC/B,kBAAC,EAAD,CACES,IAAKT,EAASE,GACdF,SAAUA,EACVC,SAAU,EAAKV,MAAMU,SACrBF,gBAAiB,EAAKR,MAAMmB,sB,GAhBjBjB,a,wOC2DRkB,E,2MAxDbC,MAAQ,CAGNZ,SAAU,CACR,CAAEE,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,K,EAIpBS,YAAc,WACZ,IAAMb,EAAW,EAAKY,MAAMZ,SAASQ,KAAI,SAAAM,GAEvC,OADAA,EAAEV,MAAQ,EACHU,KAET,EAAKC,SAAS,CAAEf,c,EAGlBD,gBAAkB,SAAAiB,GAEhB,IAAMhB,EAAQ,YAAO,EAAKY,MAAMZ,UAC1BiB,EAAQjB,EAASkB,QAAQF,GAC/BhB,EAASiB,G,yVAAT,IAAuBD,GACvBhB,EAASiB,GAAOb,QAChB,EAAKW,SAAS,CAAEf,c,EAIlBmB,aAAe,SAAAC,GAIb,IAAMpB,EAAW,EAAKY,MAAMZ,SAASqB,QAAO,SAAAP,GAAC,OAAIA,EAAEZ,KAAOkB,KAC1D,EAAKL,SAAS,CAAEf,c,wEAIhB,OACE,kBAAC,IAAMsB,SAAP,KACE,kBAAC,EAAD,CACE9B,aAAcF,KAAKsB,MAAMZ,SAASqB,QAAO,SAAAP,GAAC,OAAIA,EAAEV,MAAQ,KAAGmB,SAE7D,0BAAMlC,UAAU,aACd,kBAAC,EAAD,CACEW,SAAUV,KAAKsB,MAAMZ,SACrBO,QAASjB,KAAKuB,YACdH,YAAapB,KAAKS,gBAClBE,SAAUX,KAAK6B,qB,GAjDT1B,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e8c2d35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//stateless function components\r\n// const NavBar = (props) => {\r\n//   return (\r\n//     <nav className=\"navbar navbar-light bg-light\">\r\n//       <span className=\"navbar-brand mb-0 h1\">\r\n//         Navbar{\" \"}\r\n//         <span className=\"badge badge-pill badge-secondary\">\r\n//           {props.totalCounter}\r\n//         </span>\r\n//       </span>\r\n//     </nav>\r\n//   );\r\n// }\r\n\r\n// export default NavBar;\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <span className=\"navbar-brand mb-0 h1\">\r\n          Navbar{\" \"}\r\n          <span className=\"badge badge-pill badge-secondary\">\r\n            {this.props.totalCounter}\r\n          </span>\r\n        </span>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  //for single source of truth....to update the state of object and display on the frontend\r\n  //   state = {\r\n  //     value: this.props.counters.value\r\n  //     //props contains data that we gibve to component..\r\n  //     //state includes data that local orprivate to component.. others componenrt cannot access theat data props are readonly\r\n\r\n  //     // image: \"https://picsum.photos/500/300\"\r\n  //     //we will create an array of tags and render them with list..\r\n  //     //tags: []\r\n  //   };\r\n\r\n  //handleIncrement = () => {\r\n  //this.state.tags.push(\"tag\"); ...this give an error...because this is undefined... we have no access to this\r\n  //to solve this problem we can use arrow function of create constructor to handle the 'this'\r\n\r\n  //this.state.tags.push(\"tags\");\r\n  //its not gonna work.. to amke this happen we have to use method from base class component setState()\r\n  // where this will tell react that state object si changed and change will happen to ReactDOM\r\n  //this.setState({ value: this.state.value + 1 });\r\n\r\n  // let join = this.state.tags.concat(\"tags\");\r\n  // console.log(join);\r\n  // this.setState({ tags: join });\r\n  //};\r\n\r\n  //   renderTags() {\r\n  //     if (this.state.tags.length === 0) return <p>There are no tags!</p>;\r\n  //     //every list should have a unique key to distinguish between them\r\n  //     let x = Math.floor(Math.random() * 100);\r\n  //     return (\r\n  //       <ul>\r\n  //         {this.state.tags.map(tag => (\r\n  //           <li key={tag + x}>{tag}</li>\r\n  //         ))}\r\n  //       </ul>\r\n  //     );\r\n  //   }\r\n\r\n  render() {\r\n    //every REACT component has property called prop..\r\n    //thisis basically plan javascript obj includes all attri thatset in counter\r\n    //console.log(\"props\", this.props);\r\n    return (\r\n      <div>\r\n        {/* <img src={this.state.image} alt=\"noimage\" /> */}\r\n        <span className={this.getBadgeClass()}>{this.format()}</span>\r\n        {/* <button className=\"btn btn-secondary btn-sm\">Increment</button> */}\r\n        {/* renderig the list using map function..inside map that is and array paramater*/}\r\n        {/* <ul>{this.state.tags.map(tag => <li key={tag}>{tag}</li>) }</ul> */}\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => this.props.handleIncrement(this.props.counters)} //here we have to pass the refernce instead of calling function\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          INCREMENT\r\n        </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => this.props.onDelete(this.props.counters.id)} //here we have to pass the refernce instead of calling function\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          DELETE\r\n        </button>\r\n\r\n        {/* {this.renderTags()} */}\r\n        {/* {this.state.tags.length === 0 && \"Please create a new tag.\"} */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //created a method to append badge style attributes class in span\r\n  getBadgeClass() {\r\n    let classes = \"badge m-2 badge-\"; //declared a classes var that conatins the style attributes\r\n    //console.log(this.props.counters.value, classes);\r\n    classes += this.props.counters.value === 0 ? \"warning\" : \"primary\"; // here it checks if count===0 then give warning atrr otherwise primary attri\r\n    return classes;\r\n  }\r\n\r\n  //creating another method\r\n  format() {\r\n    //used ocject destructuring..so here we are picking up the count property and setting to this.state and assinging to const object poperty count\r\n    const { value: count } = this.props.counters;\r\n    return count === 0 ? \"zero\" : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={this.props.onReset}\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n          type=\"button\"\r\n        >\r\n          RESET\r\n        </button>\r\n        {this.props.counters.map(counters => (\r\n          <Counter\r\n            key={counters.id}\r\n            counters={counters}\r\n            onDelete={this.props.onDelete}\r\n            handleIncrement={this.props.onIncrement}\r\n          ></Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    //create an array of counter components\n    //NOTE: Rule: the component owns the state should be the one to modifying it.\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleIncrement = counter => {\n    //now we colne the array instead of makeing changes directly into it.\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter }; //clone the counter object that we receive\n    counters[index].value++; //incrementing the vlaue of the counter\n    this.setState({ counters });\n    //console.log(counters);\n    //console.log(this.state.counters[0]);\n  };\n  handleDelete = counterID => {\n    //we not gonna delet the state.. we will create a new state and then setState to react\n    //this will give all the counters except the selected one an then pass that counter to this.setState\n    //console.log(\"id\", counterID);\n    const counters = this.state.counters.filter(c => c.id !== counterID);\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounter={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}